from flask import Flask, render_template, request, redirect, url_for, send_from_directory, flash
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, login_user, login_required, logout_user, current_user
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime
import os

from config import *
from models import db, User, Batch, AudioFile
from utils import save_audio, transcribe_with_segments, save_segments

app = Flask(__name__)
app.config.from_object('config')

db.init_app(app)
login_manager = LoginManager()
login_manager.login_view = 'login'
login_manager.init_app(app)

with app.app_context():
    db.create_all()

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# الصفحة الرئيسية
@app.route('/')
def index():
    return render_template('index.html')

# تسجيل حساب
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        email = request.form['email']
        password = generate_password_hash(request.form['password'])

        new_user = User(username=username, email=email, password=password)
        db.session.add(new_user)
        db.session.commit()
        flash("✅ تم إنشاء الحساب، يمكنك تسجيل الدخول الآن", "success")
        return redirect(url_for('login'))
    return render_template('register.html')

# تسجيل الدخول
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        user = User.query.filter_by(email=request.form['email']).first()
        if user and check_password_hash(user.password, request.form['password']):
            login_user(user)
            return redirect(url_for('dashboard'))
        flash("❌ البريد الإلكتروني أو كلمة المرور غير صحيحة", "danger")
    return render_template('login.html')

# تسجيل الخروج
@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash("🚪 تم تسجيل الخروج", "info")
    return redirect(url_for('index'))

# لوحة التحكم للمستخدم
@app.route('/dashboard')
@login_required
def dashboard():
    batches = Batch.query.filter_by(created_by=current_user.id).all()
    return render_template('dashboard.html', batches=batches)

# إنشاء Batch جديد ورفع ملفات
@app.route('/admin/upload', methods=['GET', 'POST'])
@login_required
def admin_upload():
    if request.method == 'POST':
        batch_name = request.form['batch_name']
        language = request.form['language']
        files = request.files.getlist('audio_files')

        new_batch = Batch(name=batch_name, created_by=current_user.id, created_at=datetime.utcnow())
        db.session.add(new_batch)
        db.session.commit()

        for file in files:
            filename, filepath = save_audio(file)
            segments = transcribe_with_segments(filepath, language)
            audio = AudioFile(
                filename=filename,
                audio_path=filepath,
                transcript="\n".join(seg['text'] for seg in segments),
                segments=segments,
                batch=new_batch
            )
            db.session.add(audio)
            save_segments(segments, filename)

        db.session.commit()
        flash("✅ تم رفع وتفريغ الملفات بنجاح", "success")
        return redirect(url_for('dashboard'))

    return render_template('admin_upload.html', languages=LANGUAGES)

# عرض Batch والملفات المرتبطة به
@app.route('/batch/<int:batch_id>')
@login_required
def view_batch(batch_id):
    batch = Batch.query.get_or_404(batch_id)
    return render_template('view_batch.html', batch=batch)

# تعديل ملف صوتي مفَرّغ
@app.route('/edit/<int:audio_id>', methods=['GET', 'POST'])
@login_required
def edit_file(audio_id):
    file = AudioFile.query.get_or_404(audio_id)
    if request.method == 'POST':
        updated_segments = []
        for i in range(len(file.segments)):
            seg_text = request.form.get(f"text_{i}")
            seg_speaker = request.form.get(f"speaker_{i}")
            seg = file.segments[i]
            seg['text'] = seg_text
            seg['speaker'] = seg_speaker
            updated_segments.append(seg)
        file.segments = updated_segments
        file.status = 'reviewed'
        db.session.commit()
        flash("✅ تم حفظ التعديلات", "success")
        return redirect(url_for('view_batch', batch_id=file.batch_id))
    return render_template('edit_file.html', file=file)

# تحميل ملف .txt للتفريغ النهائي
@app.route('/download/<filename>')
@login_required
def download(filename):
    return send_from_directory(TRANSCRIPT_FOLDER, filename, as_attachment=True)

# تشغيل الملف الصوتي نفسه
@app.route('/audio/<path:filename>')
def serve_audio(filename):
    return send_from_directory(UPLOAD_FOLDER, filename)
